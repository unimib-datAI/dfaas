# HAProxy configuration file updated by DFaaS agent on {{.Now}}

# See k8s/charts/values-haproxy.yaml for more information about global,
# userlist, defaults and program sections.
global
  master-worker
  stats socket /var/run/haproxy.sock mode 660 level admin expose-fd listeners
  insecure-fork-wanted
  expose-deprecated-directives
  log stdout format raw local0
  maxconn 1024

userlist dataplaneapi
  user admin insecure-password admin

defaults
  mode http
  option httplog
  log global
  timeout client 60s
  timeout connect 60s
  timeout server 60s

program api
  command /bin/sh /usr/local/etc/haproxy/includes/dataplane-start.sh
  no option start-on-reload

# The configuration is generated and changed by the DFaaS agent from this point
# on.

{{/* #################### STICK-TABLES #################### */ -}}

{{range $funcName, $func := .Functions -}}
backend st_users_func_{{$funcName}}
    stick-table type integer size 10 expire {{$.StrRecalc}} store http_req_cnt,http_req_rate(1s)
{{end}}

{{/* #################### FRONTEND #################### */ -}}

frontend fe_main
    bind *:80

    {{/* Enable statistics web page */ -}}
    stats enable
    stats auth admin:admin
    stats uri /haproxy?stats

    {{/* ########### ACLs FOR CHECKING IF A NODE IS KNOWN ######### */ -}}
    {{if not $.Nodes}}
    acl is_hdr_nodeID_known always_false
    {{end}}
    {{range $nodeID, $_ := $.Nodes}}
    acl is_hdr_nodeID_known req.hdr(DFaaS-Node-ID) -m str {{$nodeID}} {{/* Conditions with same name, called multiple times are joined with OR */}}
    {{end}}

    {{/* ACL check for DFaaS-Node-ID header with a variable */ -}}
    http-request set-var(req.hdrcnt_nodeid) hdr_cnt(DFaaS-Node-ID)
    acl has_nodeid_hdr var(req.hdrcnt_nodeid),add(0) gt 0 {{- /* The ",add(0)" is needed here, for some reason (maybe haproxy bug? like int/str conversion or something... if you remove it there will be problems!!!) */}}
    http-request capture str(hdrID:),concat(,req.hdrcnt_nodeid,) len 10 {{- /* e.g. "hdrID:5" */}}

    {{/* Path ACLs */ -}}
    acl is_path_root path /
    acl is_path_healthz path /healthz
    acl is_path_haproxy path_beg /haproxy
    acl is_path_system_funcs path /system/functions
    acl is_path_function path_beg /function/

    {{/* ACLs is_func_XXX */ -}}
    {{range $funcName, $_ := .Functions -}}
    acl is_func_{{$funcName}} path_beg /function/{{$funcName}}
    {{end}}
    
    {{/* Capture some request headers in log */ -}}
    http-request capture req.hdr(Host) len 50
    http-request capture req.hdr(DFaaS-Node-ID) len 50

    {{/* Deny requests which are not directed to a function or / (root) or the
    stats page (note: the root path is needed for health checks by
    other nodes) or to /healthz */ -}}
    http-request deny unless is_path_root or is_path_healthz or is_path_haproxy or is_path_system_funcs or is_path_function

    {{/* If a hdr DFaaS-Node-ID is present AND is not known deny request. 
        * Returned message is 403 "Forbidden": The access to the resource is forbidden by this client.
    */ -}}
    http-request deny deny_status 403 if has_nodeid_hdr !is_hdr_nodeID_known
    
    {{/* ########## BACKEND SELECTION ########## */ -}}

    use_backend be_ok if is_path_root
    use_backend be_healthz if is_path_healthz
    use_backend be_system_funcs if is_path_system_funcs
    {{range $funcName, $_ := .Functions -}}
    use_backend be_myself if is_func_{{$funcName}} has_nodeid_hdr
    use_backend be_{{$funcName}} if is_func_{{$funcName}} !has_nodeid_hdr
    {{end}}

    {{/* ########## TRACKING WITH STICK TABLES ########## */ -}}

    {{range $funcName, $_ := .Functions -}}
    http-request track-sc1 dst_port table st_users_func_{{$funcName}} if is_func_{{$funcName}} !has_nodeid_hdr {{- /* Using Sticky-Counter #1 */}}
    {{end}}

{{/* #################### BACKEND FOR SIMPLE 200 RESPONSES #################### */ -}}

backend be_ok
    http-request return status 200 content-type "text/plain" string "This is a DFaaS node. Call a function with /function/<funcname>\n"

{{/* #################### BACKEND FOR HEALTHCHECK #################### */ -}}

backend be_healthz
    {{/* Perform HTTP health checks */ -}}
    option httpchk GET /healthz
    {{/* Enable HTTP connection closing on the server side. This provides the lowest latency
    on the client side (slow network) and the fastest session reuse on the server side
    to save server resources */ -}}
    option http-server-close
    server healthz {{.HttpServerHost}}:{{.HttpServerPort}} check

{{/* #################### BACKEND FOR MANAGING OPENFAAS FUNCTIONS #################### */ -}}

backend be_system_funcs
    {{/* Perform HTTP health checks */ -}}
    option httpchk GET /
    {{/* Enable HTTP connection closing on the server side. This provides the lowest latency
    on the client side (slow network) and the fastest session reuse on the server side
    to save server resources */ -}}
    option http-server-close
    server system_funcs {{.OpenFaaSHost}}:{{.OpenFaaSPort}} check

{{/* #################### BACKEND FOR SELF OPENFAAS INSTANCE #################### */ -}}
backend be_myself
    {{/* Perform HTTP health checks */ -}}
    option httpchk GET /healthz
    {{/* Enable insertion of the X-Forwarded-For header to requests sent to servers */ -}}
    option forwardfor
    {{/* Enable HTTP connection closing on the server side. This provides the lowest latency
    on the client side (slow network) and the fastest session reuse on the server side
    to save server resources */ -}}
    option http-server-close

    {{/* Add DFaaS-Node-ID header (in any case) */ -}}
    http-request add-header DFaaS-Node-ID {{$.MyNodeID}}

    {{/* Add X-Server header to response to know which server served the request */ -}}
    http-response set-header X-Server %s

    server {{$.HAProxyHost}} {{$.OpenFaaSHost}}:{{$.OpenFaaSPort}} check

{{/* #################### BACKEND FOR OPENFAAS FUNCTIONS #################### */ -}}

{{range $funcName, $func := .Functions -}}

backend be_{{$funcName}}
    {{/* Enable load-balancing using custom weights */ -}}
    balance roundrobin

    {{/* Perform HTTP health checks */ -}}
    option httpchk GET /healthz
    {{/* Enable insertion of the X-Forwarded-For header to requests sent to servers */ -}}
    option forwardfor
    {{/* Enable HTTP connection closing on the server side. This provides the lowest latency
    on the client side (slow network) and the fastest session reuse on the server side
    to save server resources */ -}}
    option http-server-close

    {{/* Add DFaaS-Node-ID header (in any case) */ -}}
    http-request add-header DFaaS-Node-ID {{$.MyNodeID}}

    {{/* Add X-Server header to response to know which server served the request */ -}}
    http-response set-header X-Server %s

    {{range $nodeID, $weight := $func.Weights -}}
    {{if (eq $nodeID $.MyNodeID) -}}
    server {{$.HAProxyHost}} {{$.OpenFaaSHost}}:{{$.OpenFaaSPort}} weight {{$weight}} check
    {{else -}}
    server {{(index $.Nodes $nodeID).HAProxyHost}} {{(index $.Nodes $nodeID).HAProxyHost}}:{{(index $.Nodes $nodeID).HAProxyPort}} weight {{$weight}} check
    {{end -}}
    {{end}}
{{end}}
