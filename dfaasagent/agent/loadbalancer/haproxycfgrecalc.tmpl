# HAProxy configuration file updated by DFaaS agent on {{.Now}}
# DFaaS Agent running with Recalc strategy.

# See k8s/charts/values-haproxy.yaml for more information about global,
# userlist, defaults and program sections.
global
  master-worker no-exit-on-failure
  stats socket /var/run/haproxy.sock mode 660 level admin expose-fd listeners
  insecure-fork-wanted
  expose-deprecated-directives
  log stdout format raw local0

userlist dataplaneapi
  user admin insecure-password admin

defaults
  mode http
  option httplog
  log global
  timeout client 60s
  timeout connect 60s
  timeout server 60s

{{range $funcName, $func := .Functions -}}
# Stick table for invocations of function {{$funcName}} from users, not from
# other DFaaS nodes. We just use one row for all clients. Denied requests are
# not counted here.
#
# Among all stick tables, this is the only one used by the DFaaS agent to
# calculate forwarding weights.
backend st_users_func_{{$funcName}}
    stick-table type integer size 10 expire {{$.SecsRecalc}}s store http_req_cnt,http_req_rate(1s)

# Stick table for invocations of functions {{$funcName}} from all sources (users
# and other DFaaS nodes). Same structure as st_users_func{{$funcName}}.
backend st_local_func_{{$funcName}}
    stick-table type integer size 10 expire {{$.SecsRecalc}}s store http_req_cnt,http_req_rate(1s)

{{range $nodeID, $_ := $func.LimitsIn -}}
# Stick table for invocation of function {{$funcName}} from the DFaaS node with
# id {{$nodeID}}.
#
# We use destination port (80) as key and we count requests num and rate.
# RecalTime for expiring why LimitIn are updated every "RecalPeriod" time. Count
# number of requests and check rate for periods of 1 sec.
backend st_other_node_{{$funcName}}_{{$nodeID}}
    stick-table type integer size 10 expire {{$.SecsRecalc}}s store http_req_cnt,http_req_rate(1s)
{{end}}

{{end}}

frontend fe_main
    bind *:80

    {{/* Enable statistics web page */ -}}
    stats enable
    stats auth admin:admin
    stats uri /haproxy?stats

    {{/* Path ACLs */ -}}
    acl is_path_root path /
    acl is_path_healthz path /healthz
    acl is_path_haproxy path_beg /haproxy
    acl is_path_system_funcs path /system/functions
    acl is_path_function path_beg /function/

    {{/* Deny requests which are not directed to a function or / (root) or the
    stats page (note: the root path is needed for health checks by
    other nodes) or to /healthz */ -}}
    http-request deny unless is_path_root or is_path_healthz or is_path_haproxy or is_path_system_funcs or is_path_function

    {{/* Capture some request headers in log */ -}}
    http-request capture req.hdr(Host) len 50
    http-request capture req.hdr(DFaaS-Node-ID) len 50

    {{/* ACL check for DFaaS-Node-ID header with a variable, and capture that
    variable so its value will be visible in the requests log */ -}}
    http-request set-var(req.hdrcnt_nodeid) hdr_cnt(DFaaS-Node-ID)
    acl has_nodeid_hdr var(req.hdrcnt_nodeid),add(0) gt 0 {{- /* The ",add(0)" is needed here, for some reason (maybe haproxy bug? like int/str conversion or something... if you remove it there will be problems!!!) */}}
    http-request capture str(hdrID:),concat(,req.hdrcnt_nodeid,) len 10 {{- /* e.g. "hdrID:5" */}}

    {{/* ACLs is_func_XXX */ -}}
    {{range $funcName, $_ := .Functions -}}
    acl is_func_{{$funcName}} path_beg /function/{{$funcName}}
    {{end}}

    {{/* ########## IF THE REQUEST COMES FROM ANOTHER DFAAS NODE (has_nodeid_hdr) ########## */ -}}

    {{/* Deny request if rate limit exceeded */ -}}
    {{range $funcName, $func := .Functions -}}
    {{- /* # acl is_denied_rate_func_{{$funcName}} src,table_http_req_rate(st_src_func_{{$funcName}}) ge MAP_HERE {{mul $func.Limit $.SecsRecalc}} # i.e. {{$func.Limit}} req/s*/}}
    {{- /* # http-request deny deny_status 429 if is_func_{{$funcName}} is_denied_rate_func_{{$funcName}} {{- /* Conditions are ANDed */}}
    {{end}}

    {{/* ########## IF THE REQUEST COMES FROM A USER (!has_nodeid_hdr) ########## */ -}}

    {{/* If the invocation rate (across all clients) is greater than the total
    func req/s limit, we should send the request to be_others_func_XXX */ -}}
    {{range $funcName, $func := .Functions -}}
    {{/* Define ACL (using a variable) and capture that variable */ -}}
    http-request set-var(req.rate_local_func_{{$funcName}}) dst_port,table_http_req_rate(st_local_func_{{$funcName}})
    acl local_capacity_exceeded_func_{{$funcName}} var(req.rate_local_func_{{$funcName}}),add(0) ge {{$func.Limit}}  {{- /* The ",add(0)" needed also here (see above for explanation) */}}
    http-request capture str({{$funcName}}:),concat(,req.rate_local_func_{{$funcName}},) len 20 {{- /* e.g. "figlet:5" */}}
    {{end}}

    {{/* ########## TRACKING WITH STICK TABLES ########## */ -}}

    {{/* Track invocations by-function for users only
    (this works because dst_port is 80 for every possible request) */ -}}
    {{range $funcName, $_ := .Functions -}}
    http-request track-sc1 dst_port table st_users_func_{{$funcName}} if is_func_{{$funcName}} !has_nodeid_hdr {{- /* Using Sticky-Counter #1 */}}
    {{end}}

    {{/* [NEW] ########### ACLs FOR CHECKING IF A NODE IS KNOWN ######### */ -}}
    {{/* Multiple conditions in the same line are joined together with an AND
        instead named ACLs named multiple times are joined with OR.
            - acl is_node_{{$nodeID}} check that the http request came from {nodeID} node. 
    */ -}}
    {{if not $.Nodes}}
    acl is_hdr_nodeID_known always_false
    {{end}}
    {{range $nodeID, $_ := $.Nodes}}
    acl is_hdr_nodeID_known req.hdr(DFaaS-Node-ID) -m str {{$nodeID}} {{/* Conditions with same name, called multiple times are joined with OR */}}
    acl is_node_{{$nodeID}} req.hdr(DFaaS-Node-ID) -m str {{$nodeID}}
    {{end}}

    {{/* [NEW] ########## ACLs FOR LIMIT-IN CONTROL ##########*/ -}}
    {{/* If the rate of request from each other node for each function is greater than LimitIn 
        calculated by the algorithm, deny further requests */ -}}
    {{range $funcName, $func := .Functions -}}
    {{/* Define ACL (using a variable) and capture that variable */ -}}
    {{range $nodeID, $limitIn := $func.LimitsIn -}}
    http-request set-var(req.rate_other_node_{{$funcName}}_{{$nodeID}}) dst_port,table_http_req_rate(st_other_node_{{$funcName}}_{{$nodeID}})
    acl limitIn_saturated_{{$funcName}}_{{$nodeID}} var(req.rate_other_node_{{$funcName}}_{{$nodeID}}),add(0) ge {{$limitIn}}  {{- /* The ",add(0)" needed also here (see above for explanation) */}}
    http-request capture str({{$funcName}}_{{$nodeID}}:),concat(,req.rate_other_node_{{$funcName}}_{{$nodeID}},) len 100 {{- /* e.g. "figlet_nodeID:5" */}}
    {{end}}
    {{end}}

    {{/* [NEW] If a hdr DFaaS-Node-ID is present AND is not known deny request. 
        * Returned message is 403 "Forbidden": The access to the resource is forbidden by this client.
            * A different status code is useful for testing purpose; can be changed.
    */ -}}
    http-request deny deny_status 403 if has_nodeid_hdr !is_hdr_nodeID_known
    
    {{/* [NEW] Deny requests that exceed limitIn */ -}}
    {{/*
    {{range $funcName, $func := .Functions -}}
    {{range $nodeID, $limitIn := $func.LimitsIn -}}
    http-request deny deny_status 429 if has_nodeid_hdr limitIn_saturated_{{$funcName}}_{{$nodeID}}
    {{end}}
    {{end}}
    */ -}}

    {{/* ########## BACKEND SELECTION ########## */ -}}

    use_backend be_ok if is_path_root
    use_backend be_healthz if is_path_healthz
    use_backend be_system_funcs if is_path_system_funcs
    {{range $funcName, $func := .Functions -}}

    {{/* [NEW] Select backend for request that exeeds limitsIn */ -}}
    {{range $nodeID, $limitIn := $func.LimitsIn -}}
    use_backend be_limitInExceeds if is_func_{{$funcName}} is_node_{{$nodeID}} has_nodeid_hdr limitIn_saturated_{{$funcName}}_{{$nodeID}} {{- /* Conditions are ANDed */}} 
    {{end}}

    use_backend be_myself if is_func_{{$funcName}} has_nodeid_hdr {{- /* Conditions are ANDed */}}
    use_backend be_myself if is_func_{{$funcName}} !local_capacity_exceeded_func_{{$funcName}} {{- /* Conditions are ANDed */}}
    use_backend be_others_func_{{$funcName}} if is_func_{{$funcName}} !has_nodeid_hdr local_capacity_exceeded_func_{{$funcName}} {{- /* Conditions are ANDed */}}

    {{end}}

# Note: for all backend we enable HTTP health checks and HTTP connection closing
# on the server side. This provides the lowest latency on the client side (slow
# network) and the fastest session reuse on the server side to save server
# resources.

# Backend for simple 200 OK responses.
backend be_ok
    http-request return status 200 content-type "text/plain" string "This is a DFaaS node. Call a function with /function/<funcname>\n"

# Backend for health check.
backend be_healthz
    option httpchk GET /healthz
    option http-server-close
    server healthz dfaas-agent:80 check

# Backend for OpenFaaS Administrative API (/system/functions)
backend be_system_funcs
    option httpchk GET /
    option http-server-close
    server system_funcs {{.OpenFaaSHost}}:{{.OpenFaaSPort}} check

# Backend for the local OpenFaaS instance. Requests (functions) arriving here
# will be handled locally.
#
# Requests may originate directly from a client or from another DFaaS node. We
# differentiate these cases using the DFaaS-Node-ID header.
#
# When the OpenFaaS instance responds, we add an X-Server header containing the
# node's IP address and a DFaaS-Node-ID header with the agent's ID (libp2p ID).
# This allows clients to identify which DFaaS node processed the request.
backend be_myself
    option httpchk GET /
    option http-server-close

    # Automatically add the X-Forwarded-For header to let know the local
    # OpenFaaS instance of the original client's IP address.
    option forwardfor

    # Always include the DFaaS-Node-ID header containing the node's ID.
    http-request add-header DFaaS-Node-ID {{.MyNodeID}}

    # Replicate here some ACLs from the frontend. They will be used to track
    # statistics.
    acl has_nodeid_hdr var(req.hdrcnt_nodeid),add(0) gt 0
    {{range $nodeID, $_ := $.Nodes}}
    acl is_node_{{$nodeID}} req.hdr(DFaaS-Node-ID) -m str {{$nodeID}}
    {{end}}

    # For each function, record statistics in a dedicated stick table named
    # st_local_func_<funcname>. Additionally, at the neighbor node level, track
    # each function/node pair in a dedicated stick table named
    # st_other_node_<funcname>_<nodeid>.
    {{range $funcName, $func := .Functions -}}
    acl is_func_{{$funcName}} path_beg /function/{{$funcName}}
    http-request track-sc2 dst_port table st_local_func_{{$funcName}} if is_func_{{$funcName}}

    {{range $nodeID, $_ := $func.LimitsIn -}}
    http-request track-sc0 dst_port table st_other_node_{{$funcName}}_{{$nodeID}} if is_func_{{$funcName}} has_nodeid_hdr is_node_{{$nodeID}}
    {{end}}
    
    {{end}}

    http-response set-header X-Server %s
    http-response set-header DFaaS-Node-ID {{$.MyNodeID}}

    server {{$.NodeIP}} {{.OpenFaaSHost}}:{{.OpenFaaSPort}} check

{{range $funcName, $func := .Functions -}}
# Backend responsible for forwarding incoming user requests to other DFaaS
# nodes. This backend is specific to the {{$funcName}} function.
#
# Forwarding follows a round-robin method with custom weights.
#
# As with the be_myself backend, the reply will have X-Server header with the
# DFaaS agent IP address that served the requests and its node ID in
# DFaaS-Node-ID header.
#
# Neighbor nodes with a weight of 0 will be excluded.
#
# If no servers are available (no other DFaaS nodes are up), HAProxy will return
# a 503 error (with X-Server and DFaaS-Node-ID local node values).
backend be_others_func_{{$funcName}}
    option httpchk GET /
    option forwardfor
    option http-server-close

    balance roundrobin

    http-response set-header X-Server %s
    http-request add-header DFaaS-Node-ID {{$.MyNodeID}}

    # Overwrite default HAProxy 503 error with custom error. This allow to add
    # custom headers, otherwise the reply won't have X-Server and DFaaS-Node-ID.
    http-error status 503 content-type "text/plain" string "Overloaded function {{$funcName}}, no other DFaaS nodes available" hdr "X-Server" "{{$.NodeIP}}" hdr "DFaaS-Node-ID" "{{$.MyNodeID}}"

    {{range $nodeID, $weight := $func.Weights -}}
    {{if (gt $weight 0) -}}
    server {{(index $.Nodes $nodeID).HAProxyHost}} {{(index $.Nodes $nodeID).HAProxyHost}}:{{(index $.Nodes $nodeID).HAProxyPort}} weight {{$weight}} check
    {{end -}}
    {{end}}
{{end}}

# Backend for deny exceeding limit in requests.
#
# As with the be_myself backend, the reply will have X-Server with the local
# DFaaS node IP and its node IS in DFaaS-Node-ID.
#
# TODO: It could be divided in alla specific be for nodes and functions and
# returns a specific error message.
backend be_limitInExceeds
    http-response set-header X-Server {{$.NodeIP}}
    http-response set-header DFaaS-Node-ID {{$.MyNodeID}}
    http-request deny deny_status 429
